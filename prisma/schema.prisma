// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")

}
model User {
 id            String    @id @default(uuid())  
  email               String?                 @unique
  name                String?
  accounts            Account[]
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  password            String?
  emailVerified       DateTime?
  image               String?
  isTwoFactorEnabled  Boolean                 @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                    String          @id @default(uuid()) 
  userId                String
  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccounts          BankAccount[]
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  type                  String?
  provider              String?
  providerAccountId     String?
  refresh_token         String? 
  access_token          String?  
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String? 
  session_state         String?

  @@unique([provider, providerAccountId])
}

model BankAccount {
  id                    String          @id @default(uuid()) 
  accountId             String
  account               Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  bankName              String
  balance               String
  accountNumber         String         @unique
  accountHolderName     String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  accountName           String

  outgoingTransactions  Transaction[]  @relation("OutgoingTransactions")
  incomingTransactions  Transaction[]  @relation("IncomingTransactions")

  @@unique([accountNumber, accountId])
}


model Transaction {
  id                    String      @id @default(uuid()) @db.Uuid
  senderBankAccountId   String      // ID of the sender's BankAccount
  receiverBankAccountId String      // ID of the receiver's BankAccount
  senderBankAccount     BankAccount @relation("OutgoingTransactions", fields: [senderBankAccountId], references: [id])
  receiverBankAccount   BankAccount @relation("IncomingTransactions", fields: [receiverBankAccountId], references: [id])
  amount                Decimal     @db.Decimal(10, 2)
  currency              String
  status                String
  description           String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}

model VerificationToken {
  id String @id @default(uuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
